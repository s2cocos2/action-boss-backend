plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.2'
    id 'io.spring.dependency-management' version '1.1.2'
    id 'jacoco'
}

group = 'com.sparta'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // JWT
    compileOnly group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

    // S3
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.12.3'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.10"
    reportsDirectory = layout.buildDirectory.dir("$buildDir/reports/jacoco")
}

jacocoTestReport {
    reports {
        xml.required = false;
        csv.required = false;
        html.outputLocation = layout.buildDirectory.dir("$buildDir/reports/html-report")
    }

    afterEvaluate {
        getClassDirectories().setFrom(classDirectories.files.collect {
            fileTree(dir: it, exclude:  [
                    "**/*Controller*",
                    "**/*Config*",
                    "**/*ActionBossApplication*",
                    "**/*Builder*",
                    "**/*Exception*",
                    "**/*MyPagePostService*",
                    "**/*notification*",
                    "**/*post*",
                    "**/*search*"
            ])
        })
    }

    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = "CLASS"

            limit {
                counter = "INSTRUCTION"
                value = "COVEREDRATIO"
                minimum = 0.80
            }

            limit {
                counter = "BRANCH"
                value = "COVEREDRATIO"
                minimum = 0.80
            }

            excludes = [
                    "**.*Builder",
                    "**.ActionBossApplication",
                    "**.*Config",
                    "**.*Controller",
                    "**.*Exception*",
                    "**.*MyPagePostService*",
                    "**.*notification*",
                    "**.*post*",
                    "**.*search*"
            ]
        }
    }
}
